// <auto-generated />
using System;
using AppVideoGameAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVideoGameAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241104083139_IntestatarioCarta2")]
    partial class IntestatarioCarta2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVideoGameAPI.Models.AllegatoUtente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoAllegatoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoAllegatoId");

                    b.HasIndex("UserId");

                    b.ToTable("AllegatiUtente");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.AllegatoVideoGiocoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoAllegatoId")
                        .HasColumnType("int");

                    b.Property<int>("VideoGiocoStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAllegatoId");

                    b.HasIndex("VideoGiocoStockId");

                    b.ToTable("AllegatiVideoGiochiStocks");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.CaratteristichaTecnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Memoria")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SchedaArchiviazione")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CaratteristicheTecniche");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CPU = "i7",
                            GPU = "GeForce 3050",
                            Memoria = "16Gb",
                            SchedaArchiviazione = "1024"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.CarrelloOrdine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UtenteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UtenteId");

                    b.ToTable("CarrelloOrdini");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.CasaProduttrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CaseProduttrici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Insomniac Games"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Sony"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Nintendo"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Microsoft"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Naughty Dogs"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Colore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodiceColore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colori");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CodiceColore = "#ffffff"
                        },
                        new
                        {
                            Id = 2,
                            CodiceColore = "#000000"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Console", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Consoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Xbox"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "PlayStation"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "PC"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Nintendo"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.DataUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AccettaUsoDati")
                        .HasColumnType("bit");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("SaldoDisponibile")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UltimoAccesso")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca15ad04-2ce1-4dc6-b19f-12798c1bf089",
                            AccessFailedCount = 0,
                            AccettaUsoDati = false,
                            Cognome = "Sartini",
                            ConcurrencyStamp = "9d46edd5-3f23-4c8c-990d-9fc6ae08c23c",
                            Email = "fabiansartini@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nome = "Fabian",
                            NormalizedEmail = "FABIANSARTINI@GMAIL.COM",
                            NormalizedUserName = "FABIANSARTINI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7xXYjFEMk/NhuKjRsFjbyNh4fyTd1+svnhgI/nW9LB5o5y0EdUD2EP0851R/6rGg==",
                            PhoneNumberConfirmed = false,
                            SaldoDisponibile = 200.0,
                            SecurityStamp = "fe15309b-0721-4f99-9176-4c0257f61b48",
                            TwoFactorEnabled = false,
                            UserName = "fabiansartini@gmail.com"
                        },
                        new
                        {
                            Id = "676e7dd8-7527-4727-a8ee-710306429427",
                            AccessFailedCount = 0,
                            AccettaUsoDati = false,
                            Cognome = "Sartini",
                            ConcurrencyStamp = "f2d3af74-1dac-40c3-93e2-9b1cc508f386",
                            Email = "spaceplayer98@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nome = "Fabian",
                            NormalizedEmail = "SPACEPLAYER98@GMAIL.COM",
                            NormalizedUserName = "SPACEPLAYER98@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKXP5ITDLbAHxzN2qmm3+6XK0eurrhLvloMhCyfZpca2Wxl2GP53cTM/ouWrnHF01A==",
                            PhoneNumberConfirmed = false,
                            SaldoDisponibile = 300.0,
                            SecurityStamp = "f0d3b086-1703-4985-8103-e878f687b576",
                            TwoFactorEnabled = false,
                            UserName = "spaceplayer98@gmail.com"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ElementoProferito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataInserimento")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("StockVideoGiocoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StockVideoGiocoId");

                    b.HasIndex("UserId");

                    b.ToTable("ElementoProferito");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.FormatoGioco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Formati");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Codice Digitale"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "DVD"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Funzionalita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VideoGiocoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VideoGiocoId");

                    b.ToTable("Funzionalitas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Giocatore Singolo",
                            VideoGiocoId = 2
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Co-Op",
                            VideoGiocoId = 1
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Genere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Generi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Sparatutto"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Avventura"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.IndirizzoResidenza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeCitta")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomeIndirizzo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IndirizzoResidenza");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ItemCarrello", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrelloId")
                        .HasColumnType("int");

                    b.Property<double>("Prezzo")
                        .HasColumnType("float");

                    b.Property<short>("Quantita")
                        .HasColumnType("smallint");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrelloId");

                    b.HasIndex("StockId");

                    b.ToTable("ItemsCarrello");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ItemOrdine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrdineId")
                        .HasColumnType("int");

                    b.Property<double>("Prezzo")
                        .HasColumnType("float");

                    b.Property<short>("Quantita")
                        .HasColumnType("smallint");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdineId");

                    b.HasIndex("StockId");

                    b.ToTable("ItemOrdini");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.MetodoPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVC")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DataScadenza")
                        .HasColumnType("date");

                    b.Property<string>("Intestatario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SaldoDisponibile")
                        .HasColumnType("float");

                    b.Property<int>("TipoPagamentoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TipoPagamentoId");

                    b.HasIndex("UserId");

                    b.ToTable("MetodoPagamento");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ModelloConsole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.ToTable("ModelliConsole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConsoleId = 1,
                            Nome = "Xbox 360"
                        },
                        new
                        {
                            Id = 2,
                            ConsoleId = 2,
                            Nome = "PlayStation 4"
                        },
                        new
                        {
                            Id = 3,
                            ConsoleId = 2,
                            Nome = "PlayStation 5"
                        },
                        new
                        {
                            Id = 4,
                            ConsoleId = 2,
                            Nome = "PlayStation 3"
                        },
                        new
                        {
                            Id = 5,
                            ConsoleId = 3,
                            Nome = "Kata GF66"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Ordine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("MetodoPagamentoId")
                        .HasColumnType("int");

                    b.Property<string>("UtenteId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MetodoPagamentoId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Ordini");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Recensione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VideoGiocoId")
                        .HasColumnType("int");

                    b.Property<short>("Voto")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoGiocoId");

                    b.ToTable("Recensioni");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.StockConsole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaratteristcaTecnicaId")
                        .HasColumnType("int");

                    b.Property<int>("CaratteristichaTecnicaId")
                        .HasColumnType("int");

                    b.Property<int>("ColoreId")
                        .HasColumnType("int");

                    b.Property<int>("ModelloConsoleId")
                        .HasColumnType("int");

                    b.Property<double>("Prezzo")
                        .HasColumnType("float");

                    b.Property<int>("Quantita")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaratteristichaTecnicaId");

                    b.HasIndex("ColoreId");

                    b.HasIndex("ModelloConsoleId");

                    b.ToTable("StockConsoles");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.StockVideoGioco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<int>("FormatoGiocoId")
                        .HasColumnType("int");

                    b.Property<double>("Prezzo")
                        .HasColumnType("float");

                    b.Property<short>("Quantita")
                        .HasColumnType("smallint");

                    b.Property<int>("VideoGiocoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("FormatoGiocoId");

                    b.HasIndex("VideoGiocoId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.TipoAllegato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipiAllegati");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Foto Profilo"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Immagini Slider"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Video Trailer"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Documentazione Gioco"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Foto Gioco"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.TipoPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoPagemento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Visa"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Master Card"
                        });
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.VideoGioco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaratteristicaTecnicaId")
                        .HasColumnType("int");

                    b.Property<int>("CasaProduttriceId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DataRilascio")
                        .HasColumnType("date");

                    b.Property<string>("Descrizione")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CaratteristicaTecnicaId");

                    b.HasIndex("CasaProduttriceId");

                    b.ToTable("VideoGiochi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaratteristicaTecnicaId = 1,
                            CasaProduttriceId = 1,
                            DataRilascio = new DateOnly(2020, 5, 12),
                            Nome = "Ratchet e Clank "
                        },
                        new
                        {
                            Id = 2,
                            CaratteristicaTecnicaId = 1,
                            CasaProduttriceId = 4,
                            DataRilascio = new DateOnly(2020, 5, 12),
                            Nome = "Gears of War"
                        },
                        new
                        {
                            Id = 3,
                            CaratteristicaTecnicaId = 1,
                            CasaProduttriceId = 5,
                            DataRilascio = new DateOnly(2020, 5, 12),
                            Nome = "The Last of Us"
                        });
                });

            modelBuilder.Entity("GenereVideoGioco", b =>
                {
                    b.Property<int>("GeneriId")
                        .HasColumnType("int");

                    b.Property<int>("VideoGiochiId")
                        .HasColumnType("int");

                    b.HasKey("GeneriId", "VideoGiochiId");

                    b.HasIndex("VideoGiochiId");

                    b.ToTable("GenereVideoGioco");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ca15ad04-2ce1-4dc6-b19f-12798c1bf089",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "676e7dd8-7527-4727-a8ee-710306429427",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ModelloConsoleVideoGioco", b =>
                {
                    b.Property<int>("ConsolesId")
                        .HasColumnType("int");

                    b.Property<int>("VideoGiochiId")
                        .HasColumnType("int");

                    b.HasKey("ConsolesId", "VideoGiochiId");

                    b.HasIndex("VideoGiochiId");

                    b.ToTable("ModelloConsoleVideoGioco");
                });

            modelBuilder.Entity("PoolBookingApp.Models.AllegatoVideoGioco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomeFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoAllegatoId")
                        .HasColumnType("int");

                    b.Property<int>("VideoGiocoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAllegatoId");

                    b.HasIndex("VideoGiocoId");

                    b.ToTable("AllegatiVideoGiochi");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.AllegatoUtente", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.TipoAllegato", "TIpoAllegato")
                        .WithMany()
                        .HasForeignKey("TipoAllegatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany("AllegatiUtenti")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");

                    b.Navigation("TIpoAllegato");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.AllegatoVideoGiocoStock", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.TipoAllegato", "TIpoAllegato")
                        .WithMany()
                        .HasForeignKey("TipoAllegatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.StockVideoGioco", "StockVideoGioco")
                        .WithMany()
                        .HasForeignKey("VideoGiocoStockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockVideoGioco");

                    b.Navigation("TIpoAllegato");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.CarrelloOrdine", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ElementoProferito", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.StockVideoGioco", "StockVideoGioco")
                        .WithMany()
                        .HasForeignKey("StockVideoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany("ElementiProferiti")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");

                    b.Navigation("StockVideoGioco");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Funzionalita", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", "VideoGioco")
                        .WithMany("Funzionalitas")
                        .HasForeignKey("VideoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VideoGioco");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.IndirizzoResidenza", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany("IndirizziResidenza")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ItemCarrello", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.CarrelloOrdine", "CarrelloOrdine")
                        .WithMany("ItemsCarrello")
                        .HasForeignKey("CarrelloId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.StockVideoGioco", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarrelloOrdine");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ItemOrdine", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.Ordine", "Ordine")
                        .WithMany("ItemOrdini")
                        .HasForeignKey("OrdineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.StockVideoGioco", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ordine");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.MetodoPagamento", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.TipoPagamento", "TipoPagamento")
                        .WithMany("MetodiPagamenti")
                        .HasForeignKey("TipoPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany("MetodiPagamento")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");

                    b.Navigation("TipoPagamento");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.ModelloConsole", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.Console", "Console")
                        .WithMany("ModelliConsoles")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Console");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Ordine", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.MetodoPagamento", "MetodoPagamento")
                        .WithMany()
                        .HasForeignKey("MetodoPagamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.DataUser", "DataUser")
                        .WithMany("Ordini")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataUser");

                    b.Navigation("MetodoPagamento");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Recensione", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", "Utente")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", "VideoGioco")
                        .WithMany()
                        .HasForeignKey("VideoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utente");

                    b.Navigation("VideoGioco");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.StockConsole", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.CaratteristichaTecnica", "CaratteristichaTecnica")
                        .WithMany()
                        .HasForeignKey("CaratteristichaTecnicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.Colore", "Colore")
                        .WithMany()
                        .HasForeignKey("ColoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.ModelloConsole", "ModelloConsole")
                        .WithMany()
                        .HasForeignKey("ModelloConsoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CaratteristichaTecnica");

                    b.Navigation("Colore");

                    b.Navigation("ModelloConsole");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.StockVideoGioco", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.Console", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.FormatoGioco", "Formato")
                        .WithMany("StocksVideoGiochi")
                        .HasForeignKey("FormatoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", "VideoGioco")
                        .WithMany()
                        .HasForeignKey("VideoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Console");

                    b.Navigation("Formato");

                    b.Navigation("VideoGioco");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.VideoGioco", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.CaratteristichaTecnica", "RequisitoTecnico")
                        .WithMany()
                        .HasForeignKey("CaratteristicaTecnicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.CasaProduttrice", "CasaProduttrice")
                        .WithMany()
                        .HasForeignKey("CasaProduttriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CasaProduttrice");

                    b.Navigation("RequisitoTecnico");
                });

            modelBuilder.Entity("GenereVideoGioco", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.Genere", null)
                        .WithMany()
                        .HasForeignKey("GeneriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", null)
                        .WithMany()
                        .HasForeignKey("VideoGiochiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.DataUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.DataUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelloConsoleVideoGioco", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.ModelloConsole", null)
                        .WithMany()
                        .HasForeignKey("ConsolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", null)
                        .WithMany()
                        .HasForeignKey("VideoGiochiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PoolBookingApp.Models.AllegatoVideoGioco", b =>
                {
                    b.HasOne("AppVideoGameAPI.Models.TipoAllegato", "TIpoAllegato")
                        .WithMany()
                        .HasForeignKey("TipoAllegatoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppVideoGameAPI.Models.VideoGioco", "VideoGioco")
                        .WithMany("AllegatiVideoGiochi")
                        .HasForeignKey("VideoGiocoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TIpoAllegato");

                    b.Navigation("VideoGioco");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.CarrelloOrdine", b =>
                {
                    b.Navigation("ItemsCarrello");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Console", b =>
                {
                    b.Navigation("ModelliConsoles");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.DataUser", b =>
                {
                    b.Navigation("AllegatiUtenti");

                    b.Navigation("ElementiProferiti");

                    b.Navigation("IndirizziResidenza");

                    b.Navigation("MetodiPagamento");

                    b.Navigation("Ordini");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.FormatoGioco", b =>
                {
                    b.Navigation("StocksVideoGiochi");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.Ordine", b =>
                {
                    b.Navigation("ItemOrdini");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.TipoPagamento", b =>
                {
                    b.Navigation("MetodiPagamenti");
                });

            modelBuilder.Entity("AppVideoGameAPI.Models.VideoGioco", b =>
                {
                    b.Navigation("AllegatiVideoGiochi");

                    b.Navigation("Funzionalitas");
                });
#pragma warning restore 612, 618
        }
    }
}
